Start to store a collection of tips and tricks



//This created an overlay on the right and contained the htmp that is referenced 
  // Add panel view 
        this.menus.register({
            section: 'infopanel',
            panel: {
                iframeURL: absolutePath('infopanel.html'),
                width: 400,
                height: 100
            }
        })



This is checking if a person is INSIDE an area / box


// Check if user is inside the box
        let insideX = userPos.x >= this.fields.world_center_x - this.fields.world_bounds_x/2 && userPos.x <= this.fields.world_center_x + this.fields.world_bounds_x/2
        let insideY = userPos.y >= this.fields.world_center_y - this.fields.world_bounds_y/2 && userPos.y <= this.fields.world_center_y + this.fields.world_bounds_y/2 + 2
        let insideZ = userPos.z >= this.fields.world_center_z - this.fields.world_bounds_z/2 && userPos.z <= this.fields.world_center_z + this.fields.world_bounds_z/2
        let isInside = insideX && insideY && insideZ



Change object properties
  // Set color
            let color = isGood ? '#8F8' : '#F88'
            this.plugin.objects.update(this.objectID, { color }, true)


    generatePointInCircle(radius, centerX, centerY) {
        const r = radius * Math.sqrt(Math.random())
        const theta = Math.random() * 2 * Math.PI

        const xPos = Math.round(r * Math.cos(theta) + centerX)
        const yPos = Math.round(r * Math.sin(theta) + centerY)

        return {
            x: xPos,
            y: yPos
        }

        How to draw that circle???



Plugin Ideas

Get user information
Be invisible!

Draw a circle around you so many meters


Welcome Messsage

Notify when someone enters

Have a LIVE welcome board when they enter


Help button that notifies 


Ask for their display name (quick pop up box)





// Setup Firebase
firebase.initializeApp({
    apiKey: "AIzaSyDaqQT25pnhacf1Mdl0lC4zT2ezMO14pi4",
    authDomain: "ydangle-high-fidelity-test-2.firebaseapp.com",
    databaseURL: "https://ydangle-high-fidelity-test-2.firebaseio.com",
    projectId: "ydangle-high-fidelity-test-2",
    storageBucket: "ydangle-high-fidelity-test-2.appspot.com",
    messagingSenderId: "190616353628",
    appId: "1:190616353628:web:81bdd0a9e8fe382d2a1f99"
})



  let c = await JSAlert.confirm("Do you want to upload an image to replace this one?", "Replace image?", JSAlert.Icons.Question)


  import Swal from 'sweetalert2'
import JSAlert from 'js-alert'
import { Box3, Object3D, Vector3 } from 'three'

mport Map3D from '../Map3D'
import MapItem from '../Map3D/MapItem'




   /**
     * Creates a shape.
     * @param {string} shape Type of shape to create.
     * @param {object} additional Any additional properties (as an object) to apply to the shape. Default is `null`.
     * @param {number} timeout Number of milliseconds to wait for the object to be created. Default is 3000 ms (3 seconds).
     * @returns {Promise<MapItem>} Object that was created.
     */
    @DisplayError async createShape(shape, additional = null, timeout = 3000) {
        const height = Map3D.main.source.userAvatar.properties.height == null ? 0 : Map3D.main.source.userAvatar.properties.height - 0.01

        // Create shape
        const createdItem = await MapItem.create(Object.assign({
            name: shape,
            type: shape,
            x: Map3D.main.source.userAvatar.properties.x || 0,
            height: height,
            y: Map3D.main.source.userAvatar.properties.y || 0,
            use_original_scale: true
        }, additional))

        // Map item created above is not the one that is loaded into the scene, so let's wait for it
        const mapItem = await waitFor(e => Map3D.main.source.items.find(m => m.id == createdItem.id), timeout)
        return mapItem
    }

    /**
     * Creates a text object.
     * @param {object} additional Any additional properties (as an object) to apply to the text. Default is `null`.
     */
    @DisplayError async createText(additional = null) {
        let { value } = await Swal.fire({
            title: 'Text',
            text: 'Text to display.',
            input: 'text',
            showCancelButton: true
        })

        // User did not enter anything
        if (value == null || value.trim().length < 1) {
            return
        }

        value = value.trim()
        const height = Map3D.main.source.userAvatar.properties.height == null ? 0 : Map3D.main.source.userAvatar.properties.height - 0.01

        // Create object
        const createdItem = await MapItem.create(Object.assign({
            name: value,
            type: 'text',
            x: Map3D.main.source.userAvatar.container.position.x,
            y: Map3D.main.source.userAvatar.container.position.z,
            height: height,
            textValue: value,
            textFont: 'Inter',
            textColour: 'white',
            textBold: false,
            textItalics: false,
            textUnderline: false,
            alignment: 'left',
            transparent: true,
            shading: 'basic',
            doublesided: true,
            show_wireframe: false
        }, additional))

        // Map item created above is not the one that is loaded into the scene, so let's wait for it
        const mapItem = await waitFor(e => Map3D.main.source.items.find(m => m.id == createdItem.id), 3000)
        return mapItem
    }
