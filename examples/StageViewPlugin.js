import React from 'react'
import ReactDOM from 'react-dom'
import JSAlert from 'js-alert'

import Server from "../../../Server"
import BasePlugin from "../../BasePlugin"
import Map3D from "../../../Map3D"
import { Field, Input, PanelHeader, ScrollContainer, Section, Checkbox } from "../../../ui/PanelComponents"
import Hooks from '../../../utilities/Hooks'
import constants from '../../../constants'
import Timer from '../../../utilities/Timer'

/**
 * Displays a Stage View button on the UI
 */
export default class StageViewPlugin extends BasePlugin {

    /** Plugin info */
    static id = "stageview-btn"
    static name = "Stage View Button"
    static description = "Displays a Stage View button in the UI."
    settingsPanel = props => <SettingsPanel onClose={props.onClose} {...props} />

    /** On load */
    onLoad() {

        // Render the component
        this.div = document.createElement('div')
        this.div.setAttribute('id', 'stage-view-btn')
        document.getElementById('ui-overlay').appendChild(this.div)
        ReactDOM.render(<StageButton plugin={this} ref={r => this.button = r} />, this.div)

    }

    /** On unload */
    onUnload() {

        // Remove the component
        ReactDOM.unmountComponentAtNode(this.div)
        this.div.parentElement?.removeChild(this.div)

    }

}

class StageButton extends React.PureComponent {

    /** Initial state */
    state = {
        flashOn: false
    }

    componentDidMount() {
        window.addEventListener('resize', this.onRefresh)
        this.props.plugin.hooks.addHandler('stageView.refresh', this.onRefresh)

        // Add flash timer
        this.flashTimer = Timer.setInterval(this.doFlash.bind(this), 3000)

    }

    componentWillUnmount() {
        window.removeEventListener('resize', this.onRefresh)
        this.props.plugin.hooks.removeHandler('stageView.refresh', this.onRefresh)

        // Remove flash timer
        Timer.clearInterval(this.flashTimer)

    }

    onRefresh = e => this.forceUpdate()

    render() {

       // Determines if we should use horizontal joystick
       const isHorizontal = Map3D.main?.controls?.id === 'simple' || Map3D.main?.controls?.id === 'swivel' 
       let bottom = isHorizontal ? 204 : 164
       let right = isHorizontal ? 14 : 64 

        // Only show on desktop
        if (window.innerWidth < constants.mobileBreakpointWidth)
            return <></>

        // return <img src={require('./btn.svg')} />

        return <svg style={{ position: 'absolute', zIndex: 2, bottom: bottom, right: right, cursor: 'pointer' }} onClick={e => this.onClick()}  width="148" height="48" viewBox="0 0 148 48" fill="none" xmlns="http://www.w3.org/2000/svg">
            <rect width="148" height="48" rx="24" fill={this.state.flashOn ? '#5ca5e0' : "#141414"} fillOpacity="0.6" style={{ transition: 'fill 0.5s ease' }} />
            <path fillRule="evenodd" clipRule="evenodd" d="M42.4125 32.65H40.7875C39.0813 32.65 37.7 34.1125 37.7 35.9C37.7 36.2656 37.9844 36.55 38.35 36.55C38.675 36.55 39 36.2656 39 35.9C39 34.8438 39.7719 33.95 40.7875 33.95H42.4125C43.3875 33.95 44.2 34.8438 44.2 35.9C44.2 36.2656 44.4844 36.55 44.85 36.55C45.175 36.55 45.5 36.2656 45.5 35.9C45.5 34.1125 44.0781 32.65 42.4125 32.65ZM24.2125 32.65H22.5875C20.8812 32.65 19.5 34.1125 19.5 35.9C19.5 36.2656 19.7844 36.55 20.15 36.55C20.475 36.55 20.8 36.2656 20.8 35.9C20.8 34.8438 21.5719 33.95 22.5875 33.95H24.2125C25.1875 33.95 26 34.8438 26 35.9C26 36.2656 26.2844 36.55 26.65 36.55C26.975 36.55 27.3 36.2656 27.3 35.9C27.3 34.1125 25.8781 32.65 24.2125 32.65ZM33.3125 32.65H31.6875C29.9812 32.65 28.6 34.1125 28.6 35.9C28.6 36.2656 28.8844 36.55 29.25 36.55C29.575 36.55 29.9 36.2656 29.9 35.9C29.9 34.8438 30.6719 33.95 31.6875 33.95H33.3125C34.2875 33.95 35.1 34.8438 35.1 35.9C35.1 36.2656 35.3844 36.55 35.75 36.55C36.075 36.55 36.4 36.2656 36.4 35.9C36.4 34.1125 34.9781 32.65 33.3125 32.65ZM22.1 13.7C22.1 13.375 22.3844 13.05 22.75 13.05H42.25C42.575 13.05 42.9 13.375 42.9 13.7V16.6093L42.9 16.6093V22.7031C42.9 23.0281 42.6156 23.3531 42.25 23.3531L22.75 23.3531C22.4249 23.3531 22.1 23.0281 22.1 22.7031L22.1 19.7938L22.1 19.7937V13.7ZM44.2 20.4031L44.2 20.4031V22.7031C44.2 23.7593 43.3468 24.6531 42.25 24.6531L22.75 24.6531C21.6937 24.6531 20.8 23.7593 20.8 22.7031L20.8 15.9999L20.8 16V13.7C20.8 12.6437 21.6531 11.75 22.75 11.75H42.25C43.3062 11.75 44.2 12.6437 44.2 13.7V20.4031ZM26.65 28.75C26.65 30.5781 25.1875 32 23.4 32C21.5719 32 20.15 30.5781 20.15 28.75C20.15 26.9625 21.5719 25.5 23.4 25.5C25.1875 25.5 26.65 26.9625 26.65 28.75ZM29.25 28.75C29.25 30.5781 30.6719 32 32.5 32C34.2875 32 35.75 30.5781 35.75 28.75C35.75 26.9625 34.2875 25.5 32.5 25.5C30.6719 25.5 29.25 26.9625 29.25 28.75ZM41.6 25.5C39.7719 25.5 38.35 26.9625 38.35 28.75C38.35 30.5781 39.7719 32 41.6 32C43.3875 32 44.85 30.5781 44.85 28.75C44.85 26.9625 43.3875 25.5 41.6 25.5ZM25.4 28.75C25.4 27.6938 24.5062 26.8 23.45 26.8C22.3531 26.8 21.5 27.6938 21.5 28.75C21.5 29.8469 22.3531 30.7 23.45 30.7C24.5062 30.7 25.4 29.8469 25.4 28.75ZM34.5 28.75C34.5 29.8469 33.6062 30.7 32.55 30.7C31.4531 30.7 30.6 29.8469 30.6 28.75C30.6 27.6938 31.4531 26.8 32.55 26.8C33.6062 26.8 34.5 27.6938 34.5 28.75ZM41.65 30.7C40.5531 30.7 39.7 29.8469 39.7 28.75C39.7 27.6938 40.5531 26.8 41.65 26.8C42.7063 26.8 43.6 27.6938 43.6 28.75C43.6 29.8469 42.7063 30.7 41.65 30.7Z" fill="white"/>
            <path d="M63.3881 21.3636C63.3284 20.8598 63.0864 20.4688 62.6622 20.1903C62.238 19.9119 61.7176 19.7727 61.1011 19.7727C60.6504 19.7727 60.2559 19.8456 59.9179 19.9915C59.5831 20.1373 59.3213 20.3378 59.1324 20.593C58.9468 20.8482 58.854 21.1383 58.854 21.4631C58.854 21.7348 58.9186 21.9685 59.0479 22.1641C59.1804 22.3563 59.3495 22.517 59.555 22.6463C59.7604 22.7723 59.9759 22.8767 60.2013 22.9595C60.4266 23.0391 60.6338 23.1037 60.8227 23.1534L61.8568 23.4318C62.122 23.5014 62.4169 23.5975 62.7417 23.7202C63.0699 23.8428 63.3831 24.0102 63.6814 24.2223C63.983 24.4311 64.2316 24.6996 64.4271 25.0277C64.6227 25.3558 64.7204 25.7585 64.7204 26.2358C64.7204 26.786 64.5763 27.2831 64.2879 27.7273C64.0029 28.1714 63.5853 28.5244 63.0351 28.7862C62.4882 29.0481 61.8237 29.179 61.0415 29.179C60.3123 29.179 59.6809 29.0613 59.1473 28.826C58.617 28.5907 58.1994 28.2625 57.8944 27.8416C57.5928 27.4207 57.4221 26.9318 57.3824 26.375H58.6551C58.6882 26.7595 58.8175 27.0777 59.0429 27.3295C59.2716 27.5781 59.5599 27.7637 59.9079 27.8864C60.2593 28.0057 60.6371 28.0653 61.0415 28.0653C61.5121 28.0653 61.9347 27.9891 62.3092 27.8366C62.6837 27.6809 62.9804 27.4654 63.1991 27.1903C63.4179 26.9119 63.5273 26.5871 63.5273 26.2159C63.5273 25.8778 63.4328 25.6027 63.2439 25.3906C63.055 25.1785 62.8064 25.0062 62.4981 24.8736C62.1899 24.741 61.8568 24.625 61.4988 24.5256L60.246 24.1676C59.4506 23.9389 58.8208 23.6125 58.3568 23.1882C57.8928 22.764 57.6608 22.2088 57.6608 21.5227C57.6608 20.9527 57.8149 20.4555 58.1231 20.0312C58.4347 19.6037 58.8523 19.2723 59.376 19.0369C59.903 18.7983 60.4913 18.679 61.1409 18.679C61.7971 18.679 62.3805 18.7966 62.8909 19.032C63.4013 19.264 63.8057 19.5821 64.104 19.9865C64.4056 20.3909 64.5647 20.8499 64.5812 21.3636H63.3881ZM69.9095 21.3636V22.358H65.9521V21.3636H69.9095ZM67.1056 19.5341H68.2789V26.8125C68.2789 27.1439 68.3269 27.3925 68.423 27.5582C68.5225 27.7206 68.6484 27.83 68.8009 27.8864C68.9566 27.9394 69.1207 27.9659 69.2931 27.9659C69.4223 27.9659 69.5284 27.9593 69.6112 27.946C69.6941 27.9295 69.7604 27.9162 69.8101 27.9062L70.0487 28.9602C69.9692 28.9901 69.8582 29.0199 69.7156 29.0497C69.5731 29.0829 69.3925 29.0994 69.1737 29.0994C68.8423 29.0994 68.5175 29.0282 68.1993 28.8857C67.8844 28.7431 67.6226 28.526 67.4138 28.2344C67.2083 27.9427 67.1056 27.5748 67.1056 27.1307V19.5341ZM73.9216 29.179C73.4377 29.179 72.9986 29.0878 72.6041 28.9055C72.2097 28.7199 71.8965 28.4531 71.6645 28.1051C71.4325 27.7538 71.3165 27.3295 71.3165 26.8324C71.3165 26.3949 71.4027 26.0402 71.575 25.7685C71.7474 25.4934 71.9777 25.2779 72.2661 25.1222C72.5544 24.9664 72.8726 24.8504 73.2206 24.7741C73.5719 24.6946 73.9249 24.6316 74.2796 24.5852C74.7436 24.5256 75.1198 24.4808 75.4081 24.451C75.6998 24.4179 75.9119 24.3632 76.0445 24.2869C76.1804 24.2107 76.2483 24.0781 76.2483 23.8892V23.8494C76.2483 23.3589 76.1141 22.9777 75.8456 22.706C75.5805 22.4342 75.1778 22.2983 74.6375 22.2983C74.0774 22.2983 73.6382 22.4209 73.32 22.6662C73.0019 22.9115 72.7781 23.1733 72.6489 23.4517L71.5352 23.054C71.7341 22.59 71.9993 22.2287 72.3307 21.9702C72.6655 21.7083 73.03 21.526 73.4244 21.4233C73.8222 21.3172 74.2133 21.2642 74.5977 21.2642C74.843 21.2642 75.1247 21.294 75.4429 21.3537C75.7644 21.41 76.0743 21.5277 76.3726 21.7067C76.6742 21.8857 76.9244 22.1558 77.1233 22.517C77.3222 22.8783 77.4216 23.3622 77.4216 23.9688V29H76.2483V27.9659H76.1887C76.1091 28.1316 75.9765 28.3089 75.7909 28.4979C75.6053 28.6868 75.3584 28.8475 75.0502 28.9801C74.7419 29.1127 74.3657 29.179 73.9216 29.179ZM74.1006 28.125C74.5646 28.125 74.9557 28.0339 75.2739 27.8516C75.5954 27.6693 75.8373 27.4339 75.9997 27.1456C76.1655 26.8572 76.2483 26.554 76.2483 26.2358V25.1619C76.1986 25.2216 76.0892 25.2763 75.9202 25.326C75.7545 25.3724 75.5622 25.4138 75.3435 25.4503C75.128 25.4834 74.9176 25.5133 74.7121 25.5398C74.5099 25.563 74.3459 25.5829 74.2199 25.5994C73.915 25.6392 73.6299 25.7038 73.3648 25.7933C73.103 25.8795 72.8908 26.0104 72.7284 26.1861C72.5693 26.3584 72.4898 26.5937 72.4898 26.892C72.4898 27.2997 72.6406 27.608 72.9422 27.8168C73.2471 28.0223 73.6333 28.125 74.1006 28.125ZM82.6455 32.0227C82.0787 32.0227 81.5915 31.9498 81.1839 31.804C80.7762 31.6615 80.4365 31.4725 80.1647 31.2372C79.8962 31.0052 79.6824 30.7566 79.5233 30.4915L80.458 29.8352C80.5641 29.9744 80.6983 30.1335 80.8607 30.3125C81.0231 30.4948 81.2452 30.6522 81.5269 30.7848C81.8119 30.9207 82.1848 30.9886 82.6455 30.9886C83.262 30.9886 83.7707 30.8395 84.1718 30.5412C84.5728 30.2429 84.7733 29.7756 84.7733 29.1392V27.5881H84.6739C84.5877 27.7273 84.4651 27.8996 84.306 28.1051C84.1502 28.3073 83.9249 28.4879 83.6299 28.647C83.3382 28.8028 82.9438 28.8807 82.4466 28.8807C81.8302 28.8807 81.2767 28.7348 80.7861 28.4432C80.2989 28.1515 79.9128 27.7273 79.6278 27.1705C79.346 26.6136 79.2052 25.9375 79.2052 25.142C79.2052 24.3598 79.3427 23.6787 79.6178 23.0987C79.8929 22.5154 80.2757 22.0646 80.7662 21.7464C81.2568 21.425 81.8235 21.2642 82.4665 21.2642C82.9637 21.2642 83.3581 21.3471 83.6498 21.5128C83.9448 21.6752 84.1701 21.8608 84.3259 22.0696C84.485 22.2751 84.6076 22.4441 84.6938 22.5767H84.8131V21.3636H85.9466V29.2188C85.9466 29.875 85.7975 30.4086 85.4992 30.8196C85.2042 31.2339 84.8065 31.5372 84.306 31.7294C83.8089 31.925 83.2554 32.0227 82.6455 32.0227ZM82.6057 27.8267C83.0764 27.8267 83.4741 27.719 83.7989 27.5036C84.1237 27.2881 84.3706 26.9782 84.5397 26.5739C84.7087 26.1695 84.7932 25.6856 84.7932 25.1222C84.7932 24.572 84.7104 24.0864 84.5447 23.6655C84.3789 23.2446 84.1337 22.9148 83.8089 22.6761C83.484 22.4375 83.083 22.3182 82.6057 22.3182C82.1086 22.3182 81.6943 22.4441 81.3628 22.696C81.0347 22.9479 80.7878 23.286 80.6221 23.7102C80.4597 24.1345 80.3785 24.6051 80.3785 25.1222C80.3785 25.6525 80.4613 26.1214 80.627 26.5291C80.7961 26.9335 81.0447 27.2517 81.3728 27.4837C81.7042 27.7124 82.1152 27.8267 82.6057 27.8267ZM91.2961 29.1591C90.5603 29.1591 89.9256 28.9967 89.392 28.6719C88.8617 28.3438 88.4523 27.8864 88.164 27.2997C87.8789 26.7098 87.7364 26.0237 87.7364 25.2415C87.7364 24.4593 87.8789 23.7699 88.164 23.1733C88.4523 22.5734 88.8534 22.1061 89.3671 21.7713C89.8841 21.4332 90.4874 21.2642 91.1768 21.2642C91.5745 21.2642 91.9672 21.3305 92.355 21.4631C92.7428 21.5956 93.0958 21.8111 93.414 22.1094C93.7322 22.4044 93.9857 22.7955 94.1746 23.2827C94.3635 23.7699 94.458 24.3698 94.458 25.0824V25.5795H88.5716V24.5653H93.2648C93.2648 24.1345 93.1787 23.75 93.0063 23.4119C92.8373 23.0739 92.5953 22.8071 92.2805 22.6115C91.9689 22.416 91.601 22.3182 91.1768 22.3182C90.7094 22.3182 90.3051 22.4342 89.9637 22.6662C89.6256 22.8949 89.3654 23.1932 89.1831 23.5611C89.0009 23.929 88.9097 24.3234 88.9097 24.7443V25.4205C88.9097 25.9972 89.0091 26.486 89.208 26.8871C89.4102 27.2848 89.6903 27.5881 90.0482 27.7969C90.4062 28.0024 90.8221 28.1051 91.2961 28.1051C91.6043 28.1051 91.8827 28.062 92.1313 27.9759C92.3832 27.8864 92.6003 27.7538 92.7826 27.5781C92.9649 27.3991 93.1057 27.1771 93.2052 26.9119L94.3387 27.2301C94.2194 27.6146 94.0189 27.9527 93.7371 28.2443C93.4554 28.5327 93.1074 28.758 92.6931 28.9205C92.2788 29.0795 91.8131 29.1591 91.2961 29.1591ZM100.757 18.8182L103.78 27.3892H103.899L106.922 18.8182H108.214L104.476 29H103.203L99.4644 18.8182H100.757ZM109.641 29V21.3636H110.815V29H109.641ZM110.238 20.0909C110.009 20.0909 109.812 20.013 109.646 19.8572C109.484 19.7015 109.403 19.5142 109.403 19.2955C109.403 19.0767 109.484 18.8894 109.646 18.7337C109.812 18.5779 110.009 18.5 110.238 18.5C110.467 18.5 110.662 18.5779 110.824 18.7337C110.99 18.8894 111.073 19.0767 111.073 19.2955C111.073 19.5142 110.99 19.7015 110.824 19.8572C110.662 20.013 110.467 20.0909 110.238 20.0909ZM116.165 29.1591C115.429 29.1591 114.795 28.9967 114.261 28.6719C113.731 28.3438 113.321 27.8864 113.033 27.2997C112.748 26.7098 112.606 26.0237 112.606 25.2415C112.606 24.4593 112.748 23.7699 113.033 23.1733C113.321 22.5734 113.723 22.1061 114.236 21.7713C114.753 21.4332 115.357 21.2642 116.046 21.2642C116.444 21.2642 116.836 21.3305 117.224 21.4631C117.612 21.5956 117.965 21.8111 118.283 22.1094C118.601 22.4044 118.855 22.7955 119.044 23.2827C119.233 23.7699 119.327 24.3698 119.327 25.0824V25.5795H113.441V24.5653H118.134C118.134 24.1345 118.048 23.75 117.875 23.4119C117.706 23.0739 117.464 22.8071 117.15 22.6115C116.838 22.416 116.47 22.3182 116.046 22.3182C115.579 22.3182 115.174 22.4342 114.833 22.6662C114.495 22.8949 114.235 23.1932 114.052 23.5611C113.87 23.929 113.779 24.3234 113.779 24.7443V25.4205C113.779 25.9972 113.878 26.486 114.077 26.8871C114.279 27.2848 114.559 27.5881 114.917 27.7969C115.275 28.0024 115.691 28.1051 116.165 28.1051C116.473 28.1051 116.752 28.062 117 27.9759C117.252 27.8864 117.469 27.7538 117.652 27.5781C117.834 27.3991 117.975 27.1771 118.074 26.9119L119.208 27.2301C119.089 27.6146 118.888 27.9527 118.606 28.2443C118.325 28.5327 117.977 28.758 117.562 28.9205C117.148 29.0795 116.682 29.1591 116.165 29.1591ZM122.842 29L120.515 21.3636H121.748L123.399 27.2102H123.478L125.109 21.3636H126.362L127.973 27.1903H128.052L129.703 21.3636H130.936L128.609 29H127.456L125.785 23.1335H125.666L123.995 29H122.842Z" fill="white"/>
        </svg>

    }

    onClick() {

        // Get object ID
        let id = Server.dimension.data.stageview_object_id
        if (!id)
            return JSAlert.alert("Please enter the stage object ID in the plugin config.", "Missing object", JSAlert.Icons.Warning)

        // Find object
        let mapItem = Map3D.main.source.items.find(i => i.id == id)
        if (!mapItem)
            return JSAlert.alert("You are too far away from the stage to view it.", "Too far away", JSAlert.Icons.Warning)

        // Send it a click
        mapItem.onClick()

    }

    /** Called every 3 seconds */
    async doFlash() {

        // Stop if already in stage view
        if (Map3D.main.controls?.id == 'object-interaction')
            return

        // Check if flash should be enabled
        let flashingEnabled = false

        // Flash if: Media Source is active
        if (Server.dimension.data.stageview_flash_when_media_playing) {

            // Check if media source is playing
            let targetID = Server.dimension.data.stageview_object_id
            let isActive = Hooks.get(`media.source.${targetID}.isActive`).trigger()
            if (isActive)
                flashingEnabled = true

        }

        // Stop if flashing not enabled
        if (!flashingEnabled)
            return

        // Flash on
        this.setState({ flashOn: true })
        await new Promise(c => Timer.setTimeout(c, 500))

        // Flash off
        this.setState({ flashOn: false })

    }

}

class SettingsPanel extends React.PureComponent {

    render = e => <>

        {/* Header bar */}
        <PanelHeader title='Stage View Settings' buttonLayout='close' onClickClose={e => this.props.onClose()} />

        {/* Container area */}
        <ScrollContainer style={{ height: `calc(100% - ${constants.panelHeaderHeight}px)` }}>

            {/* General */}
            <Section title='Target options' />
            <Field name='Stage Object ID' help="Enter the object ID of your 'stage'. When a user clicks the Stage View button, it forwards a click to the 'stage' object. Make sure your stage object has 'Move Camera' interaction mode set up on it.">
                <Input value={Server.dimension.data.stageview_object_id} onValue={v => Server.dimension.update({ stageview_object_id: v })} />
            </Field>

            {/* Flash options */}
            <Section title='Flash when target object:' />
            <Field name='Is playing media' help="If selected, the button will flash while the target object has an active Media Source, either a live stream or an audio/video file which is currently playing.">
                <Checkbox on={Server.dimension.data.stageview_flash_when_media_playing} onToggle={v => Server.dimension.update({ stageview_flash_when_media_playing: v })} />
            </Field>

        </ScrollContainer>

    </>

    /** @private Called on display */
    componentDidMount() {

        // Register listener
        Server.dimension.addEventListener('updated', this.onChanged)

    }

    /** @private Called on remove */
    componentWillUnmount() {

        // Remove listeners
        Server.dimension.removeEventListener('updated', this.onChanged)

    }

    /** @private Called when the database changes */
    onChanged = e => this.forceUpdate()

}
